name: Accessibility Audit

on:
  push:
    branches: [ development-testing ]
  pull_request:
  workflow_dispatch:

env:
  HOST: 127.0.0.1
  PORT: 8000
  DOCROOT: .            # router.php & index.php live in repo root; change if needed
  CI_ENV: testing       # CodeIgniter reads this to set ENVIRONMENT

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: app
          MYSQL_USER: ci
          MYSQL_PASSWORD: ci
          MYSQL_ROOT_PASSWORD: root
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uci -pci || exit 1"
          --health-interval=5s --health-timeout=5s --health-retries=30
    env:
      DB_HOST: 127.0.0.1
      DB_DATABASE: app
      DB_USERNAME: ci
      DB_PASSWORD: ci
      DB_PORT: 3306

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Node build (optional) ---
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS deps
        run: npm ci || npm install

      # --- Make sure Chrome deps are present for Pa11y/Puppeteer ---
      - name: Install Chrome deps for Pa11y
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ca-certificates fonts-liberation libnss3 xdg-utils \
            libx11-xcb1 libxcomposite1 libxdamage1 libxrandr2 libgbm1 \
            libatk1.0-0 libatk-bridge2.0-0 libgtk-3-0

      # --- PHP setup ---
      - name: "Set up PHP 8.2 + extensions"
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none
          extensions: mbstring, intl, curl, pdo, pdo_mysql, mysqli, fileinfo, gd, openssl
          ini-values: |
            error_reporting=E_ALL
            display_errors=1
            log_errors=1
            html_errors=0
            date.timezone=UTC
            short_open_tag=1
            error_log=php-error.log

      - name: Wait for MySQL
        run: |
          for i in {1..60}; do
            if mysqladmin ping -h 127.0.0.1 -uci -pci --silent; then exit 0; fi
            sleep 1
          done
          echo "MySQL not ready"; exit 1

      - name: Import schema/data
        run: |
          mysql -h 127.0.0.1 -P 3306 -uci -pci app < db/database.sql

      - name: Peek DB contents
        run: |
          mysql -h 127.0.0.1 -P 3306 -uci -pci -e "SHOW DATABASES;"
          mysql -h 127.0.0.1 -P 3306 -uci -pci -D app -e "SHOW TABLES;"
          # sample row counts for key tables (change names)
          for t in users posts sessions; do
            mysql -h 127.0.0.1 -P 3306 -uci -pci -D app -e "SELECT '$t' AS table_name, COUNT(*) AS rows FROM \`$t\` LIMIT 1;" || true
          done

      # Lint critical entry points early (fast fail with clear message)
      - name: Lint router and entry
        run: |
          php -v
          php -l router.php
          # If your front controller is index.php or public/index.php, lint it too:
          [ -f index.php ] && php -l index.php || true
          [ -f public/index.php ] && php -l public/index.php || true

      # Drop a temporary health file so we can distinguish server vs app errors
      - name: Write health probe
        run: |
          cat > __health.php <<'PHP'
          <?php
          header('Content-Type: application/json');
          echo json_encode([
            "ok" => true,
            "php" => PHP_VERSION,
            "sapi" => PHP_SAPI,
            "extensions" => get_loaded_extensions()
          ]);
          PHP

      # If your router expects to be in its own directory, normalize CWD
      - name: Start PHP built-in server
        env:
          XDEBUG_MODE: off
          CI_ENV: testing 
        run: |
          nohup php -S ${HOST}:${PORT} -t "${DOCROOT}" router.php > php-server.log 2>&1 &
          sleep 0.5
          pgrep -fa "php -S" || { echo "PHP server not running"; cat php-server.log || true; exit 1; }

      - name: Wait for server
        run: |
          for i in {1..30}; do
            if curl -s "http://${HOST}:${PORT}/__health.php" >/dev/null 2>&1; then
              echo "Server is up"
              exit 0
            fi
            sleep 1
          done
          echo "Server failed to start."
          echo "==== php-server.log ====" && (cat php-server.log || true)
          exit 1

      # Hit the health probe (should be 200)
      - name: Probe built-in server
        run: |
          curl -i "http://${HOST}:${PORT}/__health.php"

      - name: Probe beranda
        run: |
          curl -i "http://${HOST}:${PORT}/beranda"

      - name: "Smoke: health"
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" "http://${HOST}:${PORT}/__health.php")
          echo "HTTP /__health.php => $code"
          test "$code" = "200"

      # Now hit your real homepage; if this 500s, we’ll print the log
      - name: "Smoke: homepage"
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" "http://${HOST}:${PORT}/")
          echo "HTTP / => $code"
          if [ "$code" != "200" ]; then
            echo "==== php-server.log ===="
            cat php-server.log || true
            exit 1
          fi

      # --- Ensure reports folder exists ---
      - name: Prepare a11y report folder
        run: mkdir -p ./a11y-tooling/a11y-reports

      # --- Run Pa11y (don’t fail here; we’ll parse the JSON next) ---
      - name: Run Pa11y CI
        continue-on-error: true
        env:
          NODE_ENV: ci
        run: |
          if [ -f ./a11y-tooling/pa11yci.json ]; then
            npx pa11y-ci --config ./a11y-tooling/pa11yci.json --reporter json \
              > ./a11y-tooling/a11y-reports/pa11y-report.json
              echo "Pa11y exit code: $? - pa11y"
          else
            # Fallback: hit homepage so we always produce a report file
            npx pa11y-ci --sitemap "http://${HOST}:${PORT}/" --reporter json \
              > ./a11y-tooling/a11y-reports/pa11y-report.json
              echo "Pa11y exit code: $? - homepage"
          fi

      # --- If Pa11y didn't produce a file, surface logs & fail clearly ---
      - name: Verify Pa11y report presence
        run: |
          test -s ./a11y-tooling/a11y-reports/pa11y-report.json || {
            echo "Pa11y did not create a report. Likely config/URL problem."
            echo "Tip: ensure pa11yci.json has valid 'urls' pointing to http://${HOST}:${PORT}/..."
            exit 2
          }

      # --- Fail job only on accessibility errors in the JSON ---
      - name: Fail job on accessibility errors
        run: |
          if grep -q '"type": "error"' ./a11y-tooling/a11y-reports/pa11y-report.json; then
            echo "❌ Pa11y found accessibility errors. Failing the job."
            sed -n '1,200p' ./a11y-tooling/a11y-reports/pa11y-report.json || true
            exit 1
          else
            echo "✅ No Pa11y accessibility errors found."
          fi

      # --- Keep the JSON as an artifact for inspection (optional) ---
      - name: Upload Pa11y report
        uses: actions/upload-artifact@v4
        with:
          name: pa11y-report
          path: ./a11y-tooling/a11y-reports/pa11y-report.json

      # Cleanup temp file
      - name: "Cleanup debug endpoints"
        if: always()
        run: rm -f __health.php __ls.php __routes.php

      # Upload server log on failure for debugging
      - name: Upload php-server.log (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: php-server-log
          path: php-server.log
