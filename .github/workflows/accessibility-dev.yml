name: Accessibility Audit

on:
  push:
    branches: [ development-testing ]
  pull_request:
    branches: [ development-testing ]
  workflow_dispatch:

env:
  HOST: 127.0.0.1
  PORT: 8000
  DOCROOT: .
  CI_ENV: testing

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: app
          MYSQL_USER: ci
          MYSQL_PASSWORD: ci
          MYSQL_ROOT_PASSWORD: root
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uci -pci || exit 1"
          --health-interval=5s --health-timeout=5s --health-retries=30
    env:
      DB_HOST: 127.0.0.1
      DB_DATABASE: app
      DB_USERNAME: ci
      DB_PASSWORD: ci
      DB_PORT: 3306

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Node build ---
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS deps
        run: npm ci || npm install

      # --- Make sure Chrome deps are present for Pa11y/Puppeteer ---
      - name: Install Chrome deps for Pa11y
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ca-certificates fonts-liberation libnss3 xdg-utils \
            libx11-xcb1 libxcomposite1 libxdamage1 libxrandr2 libgbm1 \
            libatk1.0-0 libatk-bridge2.0-0 libgtk-3-0

      - name: Install MySQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      # --- PHP setup ---
      - name: "Set up PHP 8.2 + extensions"
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none
          extensions: mbstring, intl, curl, pdo, pdo_mysql, mysqli, fileinfo, gd, openssl
          ini-values: |
            error_reporting=E_ALL
            display_errors=1
            log_errors=1
            html_errors=0
            date.timezone=UTC
            short_open_tag=1
            error_log=php-error.log

      - name: Wait for MySQL
        run: |
          for i in {1..60}; do
            if mysqladmin ping -h 127.0.0.1 -uci -pci --silent; then exit 0; fi
            sleep 1
          done
          echo "MySQL not ready"; exit 1

      - name: Import schema/data
        run: |
          test -s db/database.sql || { echo "Missing db/database.sql"; exit 2; }
          mysql -h 127.0.0.1 -P 3306 -uci -pci app < db/database.sql

      - name: Start PHP built-in server
        env:
          XDEBUG_MODE: off
          CI_ENV: testing 
        run: |
          nohup php -S ${HOST}:${PORT} -t "${DOCROOT}" router.php > php-server.log 2>&1 &
          sleep 0.5
          pgrep -fa "php -S" || { echo "PHP server not running"; cat php-server.log || true; exit 1; }

      - name: Wait for server health
        run: |
          for i in {1..60}; do
            if curl -sSf "http://${HOST}:${PORT}/" >/dev/null; then
              echo "Server OK"; exit 0
            fi
            sleep 1
          done
          echo "Server did not respond with 2xx"; echo "==== php-server.log ===="; cat php-server.log || true; exit 1

      # --- PA11Y CI ---

      - name: Run Pa11y CI (enforced)
        env:
          NODE_ENV: ci
        run: |
          set -e
          mkdir -p ./a11y-tooling/a11y-reports
          if [ -f ./a11y-tooling/pa11yci.json ]; then
            npx pa11y-ci --config ./a11y-tooling/pa11yci.json --reporter json \
              > ./a11y-tooling/a11y-reports/pa11y-report.json
          else
            npx pa11y-ci --sitemap "http://${HOST}:${PORT}/" --reporter json \
              > ./a11y-tooling/a11y-reports/pa11y-report.json
          fi
          # Ensure file exists (helps distinguish config/URL errors)
          test -s ./a11y-tooling/a11y-reports/pa11y-report.json

      # --- Always show the report in logs (even if the previous step failed) ---
      - name: Format, print, and enforce Pa11y report
        run: |
          set -euo pipefail
          if [ -s ./a11y-tooling/a11y-reports/pa11y-report.json ]; then
            npm run format
            cat ./a11y-tooling/a11y-reports/pa11y-report.json
            if grep -q '"type": "error"' ./a11y-tooling/a11y-reports/pa11y-report.json; then
              echo "Pa11y found accessibility errors. Failing the job."
              exit 1
            else
              echo "No Pa11y accessibility errors found."
            fi
          else
            echo "No report found"; exit 2
          fi


      # --- Always upload the report artifact (helps reviewers inspect failures) ---
      - name: Upload Pa11y report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pa11y-report
          path: ./a11y-tooling/a11y-reports/pa11y-report.json

      # Upload server log on failure for debugging
      - name: Upload php-server.log (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: php-server-log
          path: php-server.log
